#include "main.h"

uint8_t number[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x67};
uint8_t random_1000, random_100, random_10, random_1;
uint8_t stop_flag = 0;

typedef struct fnd {
    GPIO_TypeDef *port;
    uint16_t pin;
} FND;

FND value[8] = {
    {GPIOB, GPIO_PIN_0}, {GPIOB, GPIO_PIN_1},
    {GPIOB, GPIO_PIN_2}, {GPIOB, GPIO_PIN_3},
    {GPIOB, GPIO_PIN_4}, {GPIOB, GPIO_PIN_5},
    {GPIOB, GPIO_PIN_6}, {GPIOB, GPIO_PIN_7}
};

FND sel[4] = {
    {GPIOA, GPIO_PIN_10}, {GPIOA, GPIO_PIN_11},
    {GPIOC, GPIO_PIN_4}, {GPIOC, GPIO_PIN_3}
};

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

void display_fnd(uint8_t data, uint8_t position, uint32_t time) {
    uint32_t i;
    for (i = 0; i < 4; i++) {
        if (i == position)
            HAL_GPIO_WritePin(sel[i].port, sel[i].pin, 1);
        else
            HAL_GPIO_WritePin(sel[i].port, sel[i].pin, 0);
    }
    for (i = 0; i < 8; i++) {
        if ((data & (1 << i)) != 0)
            HAL_GPIO_WritePin(value[i].port, value[i].pin, 1);
        else
            HAL_GPIO_WritePin(value[i].port, value[i].pin, 0);
    }
    HAL_Delay(time);
}

int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();

    while (1) {
    	if (stop_flag == 0) {
            random_1000 = rand() % 10;
            random_100 = rand() % 10;
            random_10 = rand() % 10;
            random_1 = rand() % 10;
    	}

        display_fnd(number[random_1000], 3, 5);
        display_fnd(number[random_100], 2, 5);
        display_fnd(number[random_10], 1, 5);
        display_fnd(number[random_1], 0, 5);
    }
}

void SystemClock_Config(void) {
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
        Error_Handler();
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
        Error_Handler();
    }
}

static void MX_GPIO_Init(void) {
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    __HAL_RCC_GPIOC_CLK_ENABLE();
    __HAL_RCC_GPIOD_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |
                             GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_RESET);

    GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |
                             GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
}

void Error_Handler(void) {
    __disable_irq();
    while (1) {
    }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
    if (!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) {
        if (stop_flag == 1)
            stop_flag = 0;
        else
            stop_flag = 1;
    }
}

#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line) {
}
#endif /* USE_FULL_ASSERT */
